@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>


<div class="main row">
    <div class="col-4 filter-section">
    </div>
    <div class="middle-cards-section col-4">
        <div class="location-selection-holder">
            <div class="form-group">    
                <input class="form-control" id="enter-location-places-field" type="text" 
                    @bind="selectedLocation" placeholder="Waar wilt uw zoeken?" autofocus />
            </div>
            <button @onclick=MoveToCurrentLocation>Gebruik mijn locatie</button>
        </div>

        @foreach (var location in Locations)
        {
            <LocationCard Location="location"></LocationCard>
        }
    </div>

    <div class="map-section col-3">
        <ViewableMap Coordinates="this.Coordinates"></ViewableMap>
    </div>
</div>



@code {
    [Inject]
    public ApiClient ApiClient { get; set; }

    [Inject]
    IJSRuntime JSRuntime { get; set; }

    [Inject]
    IConfiguration Configuration { get; set; }

    public string selectedLocation = string.Empty;
    public CoordinateSet selectedCoordinates = new(string.Empty, string.Empty);

    public List<(double Lat, double Lng, string Title)> Coordinates = [];
    public List<LocationDTO> Locations = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            this.Locations = await this.ApiClient.LocationService.Get() ?? [];
            this.Coordinates = this.Locations.Select(location => (
                Convert.ToDouble(location.Latitude), 
                Convert.ToDouble(location.Longitude), 
                location.Name
            )).ToList();

            await this.SetDotnetHelper();
            await this.LoadGooglePlacesScript();

            StateHasChanged();
        }
    }


    /// <summary>
    /// When clicking on the button on the site, the current location is set based on geolocation.
    /// This also updates the variable selectedCoordinates.
    /// </summary>
    private async Task MoveToCurrentLocation()
    {   
        this.selectedCoordinates = await JSRuntime.InvokeAsync<CoordinateSet>("setMapViewCurrentLocation");
        this.selectedLocation = string.Empty;
    }

    /// <summary>
    /// Adds the google places script to the page. This way it's not loaded for other pages, so less heavy lifting.
    /// </summary>
    private async Task LoadGooglePlacesScript()
    {
        var googleApiKey = this.Configuration["GoogleApiKey"];
        string scriptUrl = $"https://maps.googleapis.com/maps/api/js?key={googleApiKey}&loading=async&libraries=places&callback=initPlacesField";
        await JSRuntime.InvokeVoidAsync("eval", $@"
            var script = document.createElement('script');
            script.src = '{scriptUrl}';
            script.async = true;
            script.defer = true;
            document.head.appendChild(script);
        ");
    }

    /// <summary>
    /// Creates a reference to this component that can be passed to the javascript.
    /// This way, the javascript can call methods in this file too. Two-way communication.
    /// </summary>
    private async Task SetDotnetHelper()
    {
        var dotNetHelper = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("window.setDotNetHelper", dotNetHelper);
    }

    /// <summary>
    /// This method is invoked from the javascript, when you enter a place into the textfield.
    /// It passes in the latitude and longitude of what you selected.
    /// </summary>
    /// <param name="lat">Latitude</param>
    /// <param name="lng">Longitude</param>
    [JSInvokable]
    public async Task OnSetCoordinates(string lat, string lng) =>
        this.selectedCoordinates = new(lat, lng);
}


