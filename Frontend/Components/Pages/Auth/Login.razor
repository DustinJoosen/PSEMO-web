@page "/auth/login"
@rendermode InteractiveServer
@inject ILocalStorageJwtService LocalStorageJwtService
@inject NavigationManager NavigationManager
@inject ApiClient ApiClient
@inject IPasswordPolicyService PasswordPolicy


<PageTitle>Inloggen</PageTitle>


<div class="login-main-box-holder">
    <div class="login-main-box">
        <h3 class="my-4">Inloggen</h3>

        <div class="form-group">
            <input type="email" class="form-control" value="@Email"
                   @oninput=OnEmailChange placeholder="Email" />
        </div>
        <div class="form-group">
            <input type="password" class="form-control" value="@Password"
                   @oninput=OnPasswordChange placeholder="Wachtwoord" />
        </div>

        <p class="validation-message">@validationMessage</p>
        <button class="submit-button" type="submit" @onclick=Submit disabled="@disabedForm">
            Inloggen
        </button>
        <p><a href="/auth/register">Ik heb nog geen account</a></p>
    </div>
</div>



@code {
    // Form fields.
    public string Email = "";
    public string Password = "";

    // Validation.
    public string validationMessage = string.Empty;
    public bool disabedForm => IsFormValid() ? false : true;

    private bool IsFormValid()
    {
        if (!this.EmailInCorrectFormat(this.Email))
        {
            this.validationMessage = "Email is niet valide";
            return false;
        }
        
        if (!PasswordPolicy.IsPasswordValid(this.Password, out this.validationMessage))
            return false;

        return true;
    }

    private async Task Submit()
    {
        // If it's not valid, don't even try.
        if (!this.IsFormValid())
            return;

        // Send the registration request.
        var resp = await ApiClient.AuthService.Login(new LoginDTO
        {
            Email = this.Email,
            Password = this.Password
        });

        // If something went wrong with sending the request itself.
        if (resp == null)
        {
            this.validationMessage = "Kon geen verbinding maken met de server...";
            return;
        }

        // If the account couldn't be validated.
        if (!resp.Succeeded)
        {
            this.validationMessage = resp.Message!;
            return;
        }

        // Set the token, and go to the homepage.
        await LocalStorageJwtService.Set(resp.Message!);
        NavigationManager.NavigateTo("/");
    }

    #region Validation

    private void OnEmailChange(ChangeEventArgs e)
    {
        this.Email = e.Value!.ToString() ?? "";
        StateHasChanged();
        IsFormValid();
    }

    private void OnPasswordChange(ChangeEventArgs e)
    {
        this.Password = e.Value!.ToString() ?? "";
        StateHasChanged();
        IsFormValid();
    }

    private bool EmailInCorrectFormat(string email)
    {
        var pattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
        return Regex.IsMatch(email, pattern);
    }

    #endregion
}