@rendermode InteractiveServer

<div id="coordinate-map"></div>

@code {

    [Inject]
    IJSRuntime JSRuntime { get; set; }

    /// <summary>
    /// The page using the CoordinateMap can bind a method to handle the Clicked lat/lng.
    /// <code>
    /// &lt;CoordinateMap OnClickLocation="SetSelectedLocation"&gt;&lt;/CoordinateMap&gt;
    /// </code>
    /// </summary>
    [Parameter]
    public EventCallback<(string Lat, string Lng)> OnClickLocation { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.SetDotnetHelper();
            await this.InitializeMap();
        }
    }

    /// <summary>
    /// Calls the javascript function "initializeCoordinateMap" with lat/lng parameters.
    /// </summary>
    private async Task InitializeMap() =>
        await JSRuntime.InvokeVoidAsync("initializeCoordinateMap", 52.3558672, 5.224798);

    /// <summary>
    /// Creates a reference to this component that can be passed to the javascript.
    /// This way, the javascript can call methods in this file too. Two-way communication.
    /// </summary>
    private async Task SetDotnetHelper() {
        var dotNetHelper = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("window.setDotNetHelper", dotNetHelper);
    }

    /// <summary>
    /// This method is invoked from the javascript, when you click on an map.
    /// It passes in the latitude and longitude of where you clicked. The method then
    /// passes those values back to the EventCallback.
    /// </summary>
    /// <param name="lat">Latitude</param>
    /// <param name="lng">Longitude</param>
    [JSInvokable]
    public async Task OnMapSelect(double lat, double lng) =>
        await this.OnClickLocation.InvokeAsync((lat.ToString(), lng.ToString()));
}
